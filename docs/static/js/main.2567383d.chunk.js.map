{"version":3,"sources":["components/GifSearch.js","components/GifGridItem.js","helpers/GetGif.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["GifSearch","setCategories","useState","textSearch","setTextSearch","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","handleInputChange","GifGridItem","id","title","url","className","src","alt","getGif","category","a","encodeURI","fetch","response","json","data","gifs","map","x","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGif","img","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACxB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAdW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,MASlB,SACI,uBAAOO,KAAK,OAAOC,YAAY,uCAAuCC,MAAOV,EAAYW,SAAU,SAACR,GAAD,OANjF,SAACA,GACvBF,EAAcE,EAAES,OAAOF,OAKuFG,CAAkBV,S,QCnB3HW,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACrC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKH,GAAIA,EAAII,IAAKF,EAAKG,IAAKJ,IAC5B,4BAAIA,Q,uBCNHK,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACF,gCACF,GACC,mCACTN,EAJY,UACF,gCADE,qBAIiBO,UAAUF,GAJ3B,kBAEJ,GAFI,oBAGH,oCAHG,SAMKG,MAAMR,GANX,cAMZS,EANY,gBAOKA,EAASC,OAPd,uBAOVC,EAPU,EAOVA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAEhB,GACNC,MAAOe,EAAEf,MACTC,IAAG,UAAEc,EAAEC,cAAJ,aAAE,EAAUC,iBAAiBhB,QAbtB,kBAiBXY,GAjBW,4CAAH,sDCINK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAEtB,ECHuB,SAACA,GACxB,MAA0BvB,mBAAS,CAAE6B,KAAM,GAAIO,SAAS,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KAQA,OANAC,qBAAU,WACNjB,EAAOC,GACFiB,MAAK,SAACV,GAAD,OAAUQ,EAAS,CAAEF,SAAS,EAAOP,KAAMC,SAEtD,CAACP,IAEGc,EDNmBI,CAAYlB,GAA9BM,EAAR,EAAQA,KAAMO,EAAd,EAAcA,QAEd,OACI,qCACI,6BAAKb,IACJa,GAAW,wCACZ,qBAAKjB,UAAU,YAAf,SAEQU,EAAKE,KAAI,SAACW,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAI1B,aEV/C2B,EAAe,WAExB,MAAoC3C,mBAAS,CAAC,KAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,gCACI,gDACA,cAAC,EAAD,CAAWA,cAAeA,IAE1B,6BAEQS,EAAWuB,KAAI,SAACR,GAAD,OAAc,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCV/DqB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2567383d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifSearch = ({ setCategories }) => {\r\n    const [textSearch, setTextSearch] = useState('');\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (textSearch.trim().length > 0) {\r\n            setCategories((categories) => [textSearch, ...categories]);\r\n            setTextSearch('');\r\n        }\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        setTextSearch(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"Ingrese su texto del gif a buscar...\" value={textSearch} onChange={(e) => handleInputChange(e)}></input>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nGifSearch.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img id={id} src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","export const getGif = async (category) => {\r\n    const baseUrl = 'https://api.giphy.com/v1/gifs';\r\n    const limit = 10;\r\n    const apiKey = 'tf9Qs0rYHcmRIQ8EKGrcLbKMOJwOGxgr';\r\n    const url = `${baseUrl}/search?q=${encodeURI(category)}&limit=${limit}&api_key=${apiKey}`;\r\n\r\n    const response = await fetch(url);\r\n    const { data } = await response.json();\r\n\r\n    const gifs = data.map((x) => {\r\n        return {\r\n            id: x.id,\r\n            title: x.title,\r\n            url: x.images?.downsized_medium.url,\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\nimport { GifGridItem } from './GifGridItem'\r\nimport { useFetchGif } from '../hooks/useFetchGif'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data, loading } = useFetchGif(category);\r\n\r\n    return (\r\n        <>\r\n            <h1>{category}</h1>\r\n            {loading && <p>loading</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    data.map((img) => <GifGridItem key={img.id} {...img} />)\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGif } from '../helpers/GetGif'\r\n\r\nexport const useFetchGif = (category) => {\r\n    const [state, setState] = useState({ data: [], loading: true });\r\n\r\n    useEffect(() => {\r\n        getGif(category)\r\n            .then((gifs) => setState({ loading: false, data: gifs }))\r\n\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { GifSearch } from './components/GifSearch';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([''])\r\n\r\n    return (\r\n        <div>\r\n            <h2>Gif expert app</h2>\r\n            <GifSearch setCategories={setCategories} />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map((category) => <GifGrid key={category} category={category} />)\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}